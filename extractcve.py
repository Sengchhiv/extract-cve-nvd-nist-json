import pandas as pd
import zipfile
import json

#add element as dataframe column header
items=[['cve_id','cwe','description','vulnerability_type','published_date','cve_score','attackVector',"attackComplexity","privilegesRequired","confidentialityImpact","integrityImpact","availabilityImpact","baseSeverity","authentication","vendor","product","version"]]

#run through each year of json file from 2002 to 2022
for year in range(2002,2022):
  json_file_path = "nvdcve-1.1-"+str(year)+".json.zip"
  print("Extracting "+json_file_path +"...")
  contents=pd.read_json(json_file_path,compression="zip")
  extractCVE(contents)
  print("Completed "+json_file_path)
  
 #function to extract each child/cve from json file 
 def extractCVE(contents):
  i=0
  for cve in contents['CVE_Items']:
    item=[]
    item.append(cve['cve']['CVE_data_meta']['ID'])
    if cve['cve']['problemtype']["problemtype_data"][0]["description"]:
      item.append(cve['cve']['problemtype']["problemtype_data"][0]["description"][0]["value"])
    else:
      item.append("NaN")
    item.append(cve['cve']["description"]["description_data"][0]["value"])
    vulnerability_type="NaN"
    found=1000
    vtype = ["execution","denial of service","overflow","cross-site scripting","directory traversal","bypass","escalation","sql injection","file inclusion","memory corruption","csrf","http response spliting"]
    for t in vtype:
        if 0<=cve['cve']["description"]["description_data"][0]["value"].lower().find(t)<found:
            vulnerability_type=t
            found=cve['cve']["description"]["description_data"][0]["value"].lower().find(t)
    item.append(vulnerability_type)
    item.append(cve["publishedDate"])
    if "baseMetricV3" in cve['impact']:
      item.append(cve["impact"]["baseMetricV3"]["cvssV3"]["baseScore"])
      item.append(cve["impact"]["baseMetricV3"]["cvssV3"]["attackVector"])
      item.append(cve["impact"]["baseMetricV3"]["cvssV3"]["attackComplexity"])
      item.append(cve["impact"]["baseMetricV3"]["cvssV3"]["privilegesRequired"])
      item.append(cve["impact"]["baseMetricV3"]["cvssV3"]["confidentialityImpact"])
      item.append(cve["impact"]["baseMetricV3"]["cvssV3"]["integrityImpact"])
      item.append(cve["impact"]["baseMetricV3"]["cvssV3"]["availabilityImpact"])
      item.append(cve["impact"]["baseMetricV3"]["cvssV3"]["baseSeverity"])
    elif "baseMetricV2" in cve['impact']:
      item.append(cve["impact"]["baseMetricV2"]["cvssV2"]["baseScore"])
      item.append(cve["impact"]["baseMetricV2"]["cvssV2"]["accessVector"])
      item.append(cve["impact"]["baseMetricV2"]["cvssV2"]["accessComplexity"])
      item.append(cve["impact"]["baseMetricV2"]["obtainAllPrivilege"])
      item.append(cve["impact"]["baseMetricV2"]["cvssV2"]["confidentialityImpact"])
      item.append(cve["impact"]["baseMetricV2"]["cvssV2"]["integrityImpact"])
      item.append(cve["impact"]["baseMetricV2"]["cvssV2"]["availabilityImpact"])
      item.append(cve["impact"]["baseMetricV2"]["severity"])
    else:
      item.append("NaN")
      item.append("NaN")
      item.append("NaN")
      item.append("NaN")
      item.append("NaN")
      item.append("NaN")
      item.append("NaN")
      item.append("NaN")
    if "baseMetricV2" in cve['impact']:
      item.append(cve["impact"]["baseMetricV2"]["cvssV2"]["authentication"])
    config=cve['configurations']
    if config['nodes']:
      if (not config['nodes'][0]['children']) or config['nodes'][0]['operator']=="OR":
        cpe=config['nodes'][0]['cpe_match'][0]['cpe23Uri']
      else:
        cpe=config['nodes'][0]['children'][0]['cpe_match'][0]['cpe23Uri']
      
      item.append(cpe.split(":")[3])
      item.append(cpe.split(":")[4])
      item.append(cpe.split(":")[5])
    else:
      item.append("NaN")
      item.append("NaN")
      item.append("NaN")
    i=i+1
    items.append(item)

#create dataframe and export to csv
df=pd.DataFrame(items)
df.columns = df.iloc[0]
df = df.iloc[1:].reset_index(drop=True)

df.to_csv("cvedatabase_nvd_nist.csv")
